plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.4'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'jacoco'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

ext {
    set('springCloudVersion', "2024.0.1")
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:3.0.4'
    implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'

    // redis 라이브러리
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'

    // JWT 이용하기 위한 라이브러리 3개
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'  // JWT API
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'    // JWT 구현체
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5' // JSON 처리를 위한 Jackson 모듈

    // spring에서 465포트(네이버)를 통해 메일을 보내줌
    implementation 'org.springframework.boot:spring-boot-starter-mail'

    // redis 통신 프레임워크
    implementation 'io.lettuce:lettuce-core:6.2.1.RELEASE'

    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'com.mysql:mysql-connector-j'
    annotationProcessor 'org.projectlombok:lombok'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter-test:3.0.4'
    testImplementation 'org.springframework.security:spring-security-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    testImplementation 'org.mockito:mockito-core'
    testImplementation 'org.mockito:mockito-junit-jupiter'
    testImplementation 'org.assertj:assertj-core'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

tasks.named('test') {
    useJUnitPlatform()
    finalizedBy 'jacocoTestReport' // test가 끝나면 jacocoTestReport 동작
}

jacocoTestReport {
    dependsOn test
    reports {
        html.required.set(true)
        xml.required.set(false)
        csv.required.set(false)
        html.outputLocation.set(file("$buildDir/reports/jacoco"))
    }

    classDirectories.setFrom(
            files(fileTree(
                    dir: "$buildDir/classes/java/main",
                    // 경로 변경 필수!!
                    includes: ['com/example/authservice/service/UserService.class'],
                    excludes: ['**/config/**', '**/dto/**', '**/type/**', '**/controller/**', '**/handler/**', '**/util/**']
            ))
    )
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            element = 'CLASS'

            limit {
                counter = 'INSTRUCTION'
                value = 'COVEREDRATIO'
                minimum = 0.6  // 최소 커버리지 60%로 설정
            }
        }
    }
}